Use case definition

User wants to update the SSL/TLS certificates on AWS test systems to ensure that the system is secure and accessible with HTTPS or other secure protocols.

User Role(s)

ARPLA User

Complexity

Medium

Technical Modules/Components
OpenSSL
Ansible - This module would provide the ability to automate the deployment of the new SSL/TLS certificate to the system.
Jenkins - This module provides the ability to automate the entire update process.
GIT
Python
Hashicorp Vault
Input
Hostname for which certificate is to be generated.
Output
New certificate generated for the specified host.
Certificate placed on the system at specified location.
Steps

User actions:

User selects the hostname for which the certificate needs to be generated/updated.

System actions:

 Run the automated certificate generation script to generate the certificate signing request (CSR) for the AWS test system.

User action:

Upload the certificate to BMW CLCM portal for signing the certificate signing request.
The certificate will be signed and sent back to the user.






User action:

Place the signed certificate (CRT) on the AWS system.






 Validate the updated SSL certificate.

Expiry date of the new certificate

$: openssl x509 -enddate -noout -in ltawsteg362.gi-dev.eu-central-1.aws.cloud.bmw.crt

Output:
notAfter=Mar 20 13:38:16 2024 GMT

b. Subject of the new certificate

$: openssl x509 -subject -noout -in ltawsteg362.gi-dev.eu-central-1.aws.cloud.bmw.crt

Output:
subject=C = DE, ST = Bavaria, L = Munich, O = Bayerische Motoren Werke AG, OU = PKI Services, CN = ltawsteg362.gi-dev.eu-central-1.aws.cloud.bmw, emailAddress = tcplm@bmw.com

c. Validate HTTPS access to the system.







 Upload the certificate to Hashicorp Vault.
Technical Specification
Create and test a local certificate generation Python script.
Input:
hostname
Certificate parameters:
subject=C = DE, ST = Bavaria, L = Munich, O = Bayerische Motoren Werke AG, OU = PKI Services, CN = <>, emailAddress = <>


Output:
Generated CSR file
Description:
This script will generate a certificate signing request by using openssl locally on the system.
Create a Python script to automate CLCM portal interactions using API calls.
Input:
CSR file
CLCM API parameters
subject=C = DE, ST = Bavaria, L = Munich, O = Bayerische Motoren Werke AG, OU = PKI Services, CN = <>, emailAddress = <>
Output:
Generated BMW signed CRT file
Description:
This script will automate the process of requesting a signed certificate from a Certificate signing request.
Create an Ansible playbook to validate the certificate and place it on the system.
Input:
CRT file
hostname to place the certificate
Location to place the certificate
Output:
Certificate is copied to the specified locaiton on the machine
Certificate is validated on the machine
Description:
This Ansible playbook will copy the signed certificate to the specified location on the machine, and perform smoke tests on the certificate file to validate if it's okay.
Create a Jenkins job to integrate the Python scripts and Ansible scripts.
Input:
Hostname
Output:
Certificate is generated
Certificate is signed using the CLCM portal
Certificate is copied to the specified locaiton on the machine
Certificate is validated on the machine
Certificate is uplaoded to Hashicorp Vault.
Description:
This Jenkins job integrates all the required scripts to generate the certificate, place it on the machine and validate it.
This job will also upload the final certificate to Hashicorp Vault.
